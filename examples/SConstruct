import sys
from os.path import join

from SCons.Script import ARGUMENTS, AlwaysBuild, Default, DefaultEnvironment

env = DefaultEnvironment()

env.Replace(
    AR="sdar",
    AS="sdas8051",
    CC="sdcc",
    LD="sdld",
    RANLIB="sdranlib",
    OBJCOPY="sdobjcopy",
    OBJSUFFIX=".rel",
    LIBSUFFIX=".lib",
    PROGNAME="firmware",
    PROGSUFFIX=".hex",
)

env.Append(
    CFLAGS=["--std-sdcc11"],
    CCFLAGS=[
        "--opt-code-size",  # optimize for size
        "--peep-return",  # peephole optimization for return instructions
        "-I../include"
    ]
)

SConscript('bits/SConscript', exports = 'env', variant_dir='build/bits')
SConscript('chip_id/SConscript', exports = 'env', variant_dir='build/chip_id')
SConscript('delay/SConscript', exports = 'env', variant_dir='build/delay')
SConscript('frequency/SConscript', exports = 'env', variant_dir='build/frequency')
SConscript('interrupt/SConscript', exports = 'env', variant_dir='build/interrupt')
SConscript('memory_dumper/SConscript', exports = 'env', variant_dir='build/memory_dumper')
SConscript('power_management/SConscript', exports = 'env', variant_dir='build/power_management')
SConscript('reset/SConscript', exports = 'env', variant_dir='build/reset')